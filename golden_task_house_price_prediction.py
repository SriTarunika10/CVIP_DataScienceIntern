# -*- coding: utf-8 -*-
"""Golden Task_House price prediction

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YMlfnj5zEtrLfbT5MAEifX3u0adcwQxx

**Import all necessary libaries**

---
"""

import pandas as pd
import numpy as np

"""**Read the CSV file**"""

df=pd.read_csv("/content/data.csv")

df

#head
df.head()

#tail
df.tail()

#info
df.info()

#describe
df.describe()

#describe
df.shape

# number of rows and columns
print("Number of rows:   ",df.shape[0])
print("Number of columns:",df.shape[1])

#Null values
df.isnull()

#displaying the total null values
df.isnull().sum()

#displaying the columns
df.columns

df.rename(columns={"yr_built":"year_built"},inplace=True)

df.groupby(by=["date"]).mean()

#correaltion
cor=df.corr()

cor.style.background_gradient()

"""**Visualization**"""

import matplotlib.pyplot as plt
city_counts=df['city'].value_counts()
city10=city_counts[0:10]
plt.figure(figsize=(8,8),edgecolor="white")
plt.style.use("fivethirtyeight")
plt.pie(city10.values,labels=city10.index,autopct="%1.1f%%")
plt.show()

plt.style.use("ggplot")
plt.figure(figsize=(16,6))
plt.bar(df["city"],df["price"])
plt.xlabel("City")
plt.ylabel("Price")
plt.xticks(rotation=90)
plt.show()

plt.figure(figsize=(16,6))
plt.scatter(df["city"].iloc[0:100],df["bedrooms"].iloc[0:100])
plt.xlabel("City")
plt.ylabel("Bedrooms")
plt.xticks(rotation=90)
plt.show()

"""**Applying Linear regression fpr prediction**"""

#import libraries
from sklearn import linear_model
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split

#splitting X and Y
X = df['sqft_living'].values.reshape(-1, 1)
y = df['price'].values.reshape(-1, 1)

# Split the data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

# Create a linear regression model
model_lr = LinearRegression()

# Train the model
model_lr.fit(X_train, y_train)

# Generate predictions using the trained model
predictions = model_lr.predict(X_test)

info_lr = {'Title': 'House Prices', 'X_label': 'Property Size (sq ft)', 'y_label': 'Price (AUD)'}

# Create a scatter plot
plt.scatter(X_test, y_test, label='Actual Data')
plt.scatter(X_test, predictions, color='blue', label='Predictions')
plt.xlabel(info_lr['X_label'])
plt.ylabel(info_lr['y_label'])
plt.title(info_lr['Title'])
plt.legend()
plt.show()

"""**Applying Random forest**"""

from sklearn.ensemble import RandomForestRegressor

# Create and train the Random Forest Regressor model
model_rf = RandomForestRegressor(n_estimators=100, random_state=42)
model_rf.fit(X_train, y_train)

# Generate predictions on the test set
predictions_rf = model_rf.predict(X_test)

# Create a scatter plot
plt.scatter(y_test, predictions_rf)
plt.xlabel("Actual Prices")
plt.ylabel("Predicted Prices")
plt.title("Random Forest Regressor: Actual vs. Predicted Prices")
plt.show()

"""**Applying SVR**"""

from sklearn.svm import SVR

# Create and train the Support Vector Regressor model
model_svr = SVR(kernel='linear')
model_svr.fit(X_train, y_train)

# Generate predictions on the test set
predictions_svr = model_svr.predict(X_test)

# Create a scatter plot
plt.scatter(y_test, predictions_svr)
plt.xlabel("Actual Prices")
plt.ylabel("Predicted Prices")
plt.title("Support Vector Regressor: Actual vs. Predicted Prices")
plt.show()

"""**Gradient Boosting Regressor**"""

from sklearn.ensemble import GradientBoostingRegressor

# Create and train the Gradient Boosting Regressor model
model_gb = GradientBoostingRegressor(n_estimators=100, learning_rate=0.1, random_state=42)
model_gb.fit(X_train, y_train)

# Generate predictions on the test set
predictions_gb = model_gb.predict(X_test)

# Create a scatter plot
plt.scatter(y_test, predictions_gb)
plt.xlabel("Actual Prices")
plt.ylabel("Predicted Prices")
plt.title("Gradient Boosting Regressor: Actual vs. Predicted Prices")
plt.show()

"""**Evaluation metrics for Linear Regression**"""

#MSA
from sklearn.metrics import mean_absolute_error
mae = mean_absolute_error(y_test, predictions)
print("Mean Absolute Error:", mae)

#MSE
from sklearn.metrics import mean_squared_error
mse = mean_squared_error(y_test, predictions)
print("Mean Squared Error:", mse)

#r2
from sklearn.metrics import r2_score
r2 = r2_score(y_test, predictions)
print("R-squared:", r2)

"""**Evaluation metrics for RandomForestRegressor**"""

#MSA
from sklearn.metrics import mean_absolute_error
mae = mean_absolute_error(y_test, predictions_rf)
print("Mean Absolute Error:", mae)

#MSE
from sklearn.metrics import mean_squared_error
mse = mean_squared_error(y_test, predictions_rf)
print("Mean Squared Error:", mse)

#r2
from sklearn.metrics import r2_score
r2 = r2_score(y_test, predictions_rf)
print("R-squared:", r2)

"""**Evaluation metrics for SVR**"""

#MSA
from sklearn.metrics import mean_absolute_error
mae = mean_absolute_error(y_test, predictions_svr)
print("Mean Absolute Error:", mae)

#MSE
from sklearn.metrics import mean_squared_error
mse = mean_squared_error(y_test, predictions_svr)
print("Mean Squared Error:", mse)

#r2
from sklearn.metrics import r2_score
r2 = r2_score(y_test, predictions_svr)
print("R-squared:", r2)

"""**Evaluation metrics for GradiantBoostingRegressor**"""

#MSA
from sklearn.metrics import mean_absolute_error
mae = mean_absolute_error(y_test, predictions_gb)
print("Mean Absolute Error:", mae)

#MSE
from sklearn.metrics import mean_squared_error
mse = mean_squared_error(y_test, predictions_gb)
print("Mean Squared Error:", mse)

#r2
from sklearn.metrics import r2_score
r2 = r2_score(y_test, predictions_gb)
print("R-squared:", r2)

